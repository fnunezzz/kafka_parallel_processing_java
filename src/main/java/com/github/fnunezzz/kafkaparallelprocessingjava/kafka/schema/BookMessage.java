/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class BookMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5201456961847153098L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BookMessage\",\"namespace\":\"com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema\",\"fields\":[{\"name\":\"authors\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",\"string\"]}],\"default\":null},{\"name\":\"categories\",\"type\":[\"null\",{\"type\":\"array\",\"items\":[\"null\",\"string\"]}],\"default\":null},{\"name\":\"cover\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"isbn\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"longDescription\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"pageCount\",\"type\":[\"null\",\"int\"],\"default\":null},{\"name\":\"publishedDate\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"shortDescription\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"status\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"title\",\"type\":[\"null\",\"string\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BookMessage> ENCODER =
      new BinaryMessageEncoder<BookMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BookMessage> DECODER =
      new BinaryMessageDecoder<BookMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<BookMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<BookMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<BookMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BookMessage>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this BookMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a BookMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a BookMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static BookMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.util.List<java.lang.CharSequence> authors;
   private java.util.List<java.lang.CharSequence> categories;
   private java.lang.CharSequence cover;
   private java.lang.CharSequence isbn;
   private java.lang.CharSequence longDescription;
   private java.lang.Integer pageCount;
   private java.lang.CharSequence publishedDate;
   private java.lang.CharSequence shortDescription;
   private java.lang.CharSequence status;
   private java.lang.CharSequence title;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BookMessage() {}

  /**
   * All-args constructor.
   * @param authors The new value for authors
   * @param categories The new value for categories
   * @param cover The new value for cover
   * @param isbn The new value for isbn
   * @param longDescription The new value for longDescription
   * @param pageCount The new value for pageCount
   * @param publishedDate The new value for publishedDate
   * @param shortDescription The new value for shortDescription
   * @param status The new value for status
   * @param title The new value for title
   */
  public BookMessage(java.util.List<java.lang.CharSequence> authors, java.util.List<java.lang.CharSequence> categories, java.lang.CharSequence cover, java.lang.CharSequence isbn, java.lang.CharSequence longDescription, java.lang.Integer pageCount, java.lang.CharSequence publishedDate, java.lang.CharSequence shortDescription, java.lang.CharSequence status, java.lang.CharSequence title) {
    this.authors = authors;
    this.categories = categories;
    this.cover = cover;
    this.isbn = isbn;
    this.longDescription = longDescription;
    this.pageCount = pageCount;
    this.publishedDate = publishedDate;
    this.shortDescription = shortDescription;
    this.status = status;
    this.title = title;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return authors;
    case 1: return categories;
    case 2: return cover;
    case 3: return isbn;
    case 4: return longDescription;
    case 5: return pageCount;
    case 6: return publishedDate;
    case 7: return shortDescription;
    case 8: return status;
    case 9: return title;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: authors = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: categories = (java.util.List<java.lang.CharSequence>)value$; break;
    case 2: cover = (java.lang.CharSequence)value$; break;
    case 3: isbn = (java.lang.CharSequence)value$; break;
    case 4: longDescription = (java.lang.CharSequence)value$; break;
    case 5: pageCount = (java.lang.Integer)value$; break;
    case 6: publishedDate = (java.lang.CharSequence)value$; break;
    case 7: shortDescription = (java.lang.CharSequence)value$; break;
    case 8: status = (java.lang.CharSequence)value$; break;
    case 9: title = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'authors' field.
   * @return The value of the 'authors' field.
   */
  public java.util.List<java.lang.CharSequence> getAuthors() {
    return authors;
  }


  /**
   * Sets the value of the 'authors' field.
   * @param value the value to set.
   */
  public void setAuthors(java.util.List<java.lang.CharSequence> value) {
    this.authors = value;
  }

  /**
   * Gets the value of the 'categories' field.
   * @return The value of the 'categories' field.
   */
  public java.util.List<java.lang.CharSequence> getCategories() {
    return categories;
  }


  /**
   * Sets the value of the 'categories' field.
   * @param value the value to set.
   */
  public void setCategories(java.util.List<java.lang.CharSequence> value) {
    this.categories = value;
  }

  /**
   * Gets the value of the 'cover' field.
   * @return The value of the 'cover' field.
   */
  public java.lang.CharSequence getCover() {
    return cover;
  }


  /**
   * Sets the value of the 'cover' field.
   * @param value the value to set.
   */
  public void setCover(java.lang.CharSequence value) {
    this.cover = value;
  }

  /**
   * Gets the value of the 'isbn' field.
   * @return The value of the 'isbn' field.
   */
  public java.lang.CharSequence getIsbn() {
    return isbn;
  }


  /**
   * Sets the value of the 'isbn' field.
   * @param value the value to set.
   */
  public void setIsbn(java.lang.CharSequence value) {
    this.isbn = value;
  }

  /**
   * Gets the value of the 'longDescription' field.
   * @return The value of the 'longDescription' field.
   */
  public java.lang.CharSequence getLongDescription() {
    return longDescription;
  }


  /**
   * Sets the value of the 'longDescription' field.
   * @param value the value to set.
   */
  public void setLongDescription(java.lang.CharSequence value) {
    this.longDescription = value;
  }

  /**
   * Gets the value of the 'pageCount' field.
   * @return The value of the 'pageCount' field.
   */
  public java.lang.Integer getPageCount() {
    return pageCount;
  }


  /**
   * Sets the value of the 'pageCount' field.
   * @param value the value to set.
   */
  public void setPageCount(java.lang.Integer value) {
    this.pageCount = value;
  }

  /**
   * Gets the value of the 'publishedDate' field.
   * @return The value of the 'publishedDate' field.
   */
  public java.lang.CharSequence getPublishedDate() {
    return publishedDate;
  }


  /**
   * Sets the value of the 'publishedDate' field.
   * @param value the value to set.
   */
  public void setPublishedDate(java.lang.CharSequence value) {
    this.publishedDate = value;
  }

  /**
   * Gets the value of the 'shortDescription' field.
   * @return The value of the 'shortDescription' field.
   */
  public java.lang.CharSequence getShortDescription() {
    return shortDescription;
  }


  /**
   * Sets the value of the 'shortDescription' field.
   * @param value the value to set.
   */
  public void setShortDescription(java.lang.CharSequence value) {
    this.shortDescription = value;
  }

  /**
   * Gets the value of the 'status' field.
   * @return The value of the 'status' field.
   */
  public java.lang.CharSequence getStatus() {
    return status;
  }


  /**
   * Sets the value of the 'status' field.
   * @param value the value to set.
   */
  public void setStatus(java.lang.CharSequence value) {
    this.status = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Creates a new BookMessage RecordBuilder.
   * @return A new BookMessage RecordBuilder
   */
  public static com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder newBuilder() {
    return new com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder();
  }

  /**
   * Creates a new BookMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BookMessage RecordBuilder
   */
  public static com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder newBuilder(com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder other) {
    if (other == null) {
      return new com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder();
    } else {
      return new com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder(other);
    }
  }

  /**
   * Creates a new BookMessage RecordBuilder by copying an existing BookMessage instance.
   * @param other The existing instance to copy.
   * @return A new BookMessage RecordBuilder
   */
  public static com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder newBuilder(com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage other) {
    if (other == null) {
      return new com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder();
    } else {
      return new com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for BookMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BookMessage>
    implements org.apache.avro.data.RecordBuilder<BookMessage> {

    private java.util.List<java.lang.CharSequence> authors;
    private java.util.List<java.lang.CharSequence> categories;
    private java.lang.CharSequence cover;
    private java.lang.CharSequence isbn;
    private java.lang.CharSequence longDescription;
    private java.lang.Integer pageCount;
    private java.lang.CharSequence publishedDate;
    private java.lang.CharSequence shortDescription;
    private java.lang.CharSequence status;
    private java.lang.CharSequence title;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.authors)) {
        this.authors = data().deepCopy(fields()[0].schema(), other.authors);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.categories)) {
        this.categories = data().deepCopy(fields()[1].schema(), other.categories);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.cover)) {
        this.cover = data().deepCopy(fields()[2].schema(), other.cover);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.isbn)) {
        this.isbn = data().deepCopy(fields()[3].schema(), other.isbn);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.longDescription)) {
        this.longDescription = data().deepCopy(fields()[4].schema(), other.longDescription);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.pageCount)) {
        this.pageCount = data().deepCopy(fields()[5].schema(), other.pageCount);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.publishedDate)) {
        this.publishedDate = data().deepCopy(fields()[6].schema(), other.publishedDate);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.shortDescription)) {
        this.shortDescription = data().deepCopy(fields()[7].schema(), other.shortDescription);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.status)) {
        this.status = data().deepCopy(fields()[8].schema(), other.status);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.title)) {
        this.title = data().deepCopy(fields()[9].schema(), other.title);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing BookMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.authors)) {
        this.authors = data().deepCopy(fields()[0].schema(), other.authors);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.categories)) {
        this.categories = data().deepCopy(fields()[1].schema(), other.categories);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.cover)) {
        this.cover = data().deepCopy(fields()[2].schema(), other.cover);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.isbn)) {
        this.isbn = data().deepCopy(fields()[3].schema(), other.isbn);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.longDescription)) {
        this.longDescription = data().deepCopy(fields()[4].schema(), other.longDescription);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.pageCount)) {
        this.pageCount = data().deepCopy(fields()[5].schema(), other.pageCount);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.publishedDate)) {
        this.publishedDate = data().deepCopy(fields()[6].schema(), other.publishedDate);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.shortDescription)) {
        this.shortDescription = data().deepCopy(fields()[7].schema(), other.shortDescription);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.status)) {
        this.status = data().deepCopy(fields()[8].schema(), other.status);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.title)) {
        this.title = data().deepCopy(fields()[9].schema(), other.title);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'authors' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAuthors() {
      return authors;
    }


    /**
      * Sets the value of the 'authors' field.
      * @param value The value of 'authors'.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder setAuthors(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.authors = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'authors' field has been set.
      * @return True if the 'authors' field has been set, false otherwise.
      */
    public boolean hasAuthors() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'authors' field.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder clearAuthors() {
      authors = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'categories' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getCategories() {
      return categories;
    }


    /**
      * Sets the value of the 'categories' field.
      * @param value The value of 'categories'.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder setCategories(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[1], value);
      this.categories = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'categories' field has been set.
      * @return True if the 'categories' field has been set, false otherwise.
      */
    public boolean hasCategories() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'categories' field.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder clearCategories() {
      categories = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'cover' field.
      * @return The value.
      */
    public java.lang.CharSequence getCover() {
      return cover;
    }


    /**
      * Sets the value of the 'cover' field.
      * @param value The value of 'cover'.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder setCover(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.cover = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'cover' field has been set.
      * @return True if the 'cover' field has been set, false otherwise.
      */
    public boolean hasCover() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'cover' field.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder clearCover() {
      cover = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'isbn' field.
      * @return The value.
      */
    public java.lang.CharSequence getIsbn() {
      return isbn;
    }


    /**
      * Sets the value of the 'isbn' field.
      * @param value The value of 'isbn'.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder setIsbn(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.isbn = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'isbn' field has been set.
      * @return True if the 'isbn' field has been set, false otherwise.
      */
    public boolean hasIsbn() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'isbn' field.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder clearIsbn() {
      isbn = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'longDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getLongDescription() {
      return longDescription;
    }


    /**
      * Sets the value of the 'longDescription' field.
      * @param value The value of 'longDescription'.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder setLongDescription(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.longDescription = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'longDescription' field has been set.
      * @return True if the 'longDescription' field has been set, false otherwise.
      */
    public boolean hasLongDescription() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'longDescription' field.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder clearLongDescription() {
      longDescription = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'pageCount' field.
      * @return The value.
      */
    public java.lang.Integer getPageCount() {
      return pageCount;
    }


    /**
      * Sets the value of the 'pageCount' field.
      * @param value The value of 'pageCount'.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder setPageCount(java.lang.Integer value) {
      validate(fields()[5], value);
      this.pageCount = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'pageCount' field has been set.
      * @return True if the 'pageCount' field has been set, false otherwise.
      */
    public boolean hasPageCount() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'pageCount' field.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder clearPageCount() {
      pageCount = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'publishedDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getPublishedDate() {
      return publishedDate;
    }


    /**
      * Sets the value of the 'publishedDate' field.
      * @param value The value of 'publishedDate'.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder setPublishedDate(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.publishedDate = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'publishedDate' field has been set.
      * @return True if the 'publishedDate' field has been set, false otherwise.
      */
    public boolean hasPublishedDate() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'publishedDate' field.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder clearPublishedDate() {
      publishedDate = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'shortDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getShortDescription() {
      return shortDescription;
    }


    /**
      * Sets the value of the 'shortDescription' field.
      * @param value The value of 'shortDescription'.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder setShortDescription(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.shortDescription = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'shortDescription' field has been set.
      * @return True if the 'shortDescription' field has been set, false otherwise.
      */
    public boolean hasShortDescription() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'shortDescription' field.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder clearShortDescription() {
      shortDescription = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'status' field.
      * @return The value.
      */
    public java.lang.CharSequence getStatus() {
      return status;
    }


    /**
      * Sets the value of the 'status' field.
      * @param value The value of 'status'.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder setStatus(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.status = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'status' field has been set.
      * @return True if the 'status' field has been set, false otherwise.
      */
    public boolean hasStatus() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'status' field.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder clearStatus() {
      status = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.title = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public com.github.fnunezzz.kafkaparallelprocessingjava.kafka.schema.BookMessage.Builder clearTitle() {
      title = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BookMessage build() {
      try {
        BookMessage record = new BookMessage();
        record.authors = fieldSetFlags()[0] ? this.authors : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.categories = fieldSetFlags()[1] ? this.categories : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[1]);
        record.cover = fieldSetFlags()[2] ? this.cover : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.isbn = fieldSetFlags()[3] ? this.isbn : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.longDescription = fieldSetFlags()[4] ? this.longDescription : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.pageCount = fieldSetFlags()[5] ? this.pageCount : (java.lang.Integer) defaultValue(fields()[5]);
        record.publishedDate = fieldSetFlags()[6] ? this.publishedDate : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.shortDescription = fieldSetFlags()[7] ? this.shortDescription : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.status = fieldSetFlags()[8] ? this.status : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.title = fieldSetFlags()[9] ? this.title : (java.lang.CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BookMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<BookMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BookMessage>
    READER$ = (org.apache.avro.io.DatumReader<BookMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.authors == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.authors.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.authors) {
        actualSize0++;
        out.startItem();
        if (e0 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          out.writeString(e0);
        }
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.categories == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.categories.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.CharSequence e1: this.categories) {
        actualSize1++;
        out.startItem();
        if (e1 == null) {
          out.writeIndex(0);
          out.writeNull();
        } else {
          out.writeIndex(1);
          out.writeString(e1);
        }
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.cover == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.cover);
    }

    if (this.isbn == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.isbn);
    }

    if (this.longDescription == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.longDescription);
    }

    if (this.pageCount == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeInt(this.pageCount);
    }

    if (this.publishedDate == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.publishedDate);
    }

    if (this.shortDescription == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.shortDescription);
    }

    if (this.status == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.status);
    }

    if (this.title == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeString(this.title);
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.authors = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.authors;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("authors").schema().getTypes().get(1));
          this.authors = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            if (in.readIndex() != 1) {
              in.readNull();
              e0 = null;
            } else {
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            }
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.categories = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a1 = this.categories;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("categories").schema().getTypes().get(1));
          this.categories = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
            if (in.readIndex() != 1) {
              in.readNull();
              e1 = null;
            } else {
              e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
            }
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.cover = null;
      } else {
        this.cover = in.readString(this.cover instanceof Utf8 ? (Utf8)this.cover : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.isbn = null;
      } else {
        this.isbn = in.readString(this.isbn instanceof Utf8 ? (Utf8)this.isbn : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.longDescription = null;
      } else {
        this.longDescription = in.readString(this.longDescription instanceof Utf8 ? (Utf8)this.longDescription : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.pageCount = null;
      } else {
        this.pageCount = in.readInt();
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.publishedDate = null;
      } else {
        this.publishedDate = in.readString(this.publishedDate instanceof Utf8 ? (Utf8)this.publishedDate : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.shortDescription = null;
      } else {
        this.shortDescription = in.readString(this.shortDescription instanceof Utf8 ? (Utf8)this.shortDescription : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.status = null;
      } else {
        this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.title = null;
      } else {
        this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
      }

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.authors = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.authors;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("authors").schema().getTypes().get(1));
              this.authors = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                if (in.readIndex() != 1) {
                  in.readNull();
                  e0 = null;
                } else {
                  e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                }
                a0.add(e0);
              }
            }
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.categories = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a1 = this.categories;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.CharSequence>((int)size1, SCHEMA$.getField("categories").schema().getTypes().get(1));
              this.categories = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.CharSequence> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.CharSequence e1 = (ga1 != null ? ga1.peek() : null);
                if (in.readIndex() != 1) {
                  in.readNull();
                  e1 = null;
                } else {
                  e1 = in.readString(e1 instanceof Utf8 ? (Utf8)e1 : null);
                }
                a1.add(e1);
              }
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.cover = null;
          } else {
            this.cover = in.readString(this.cover instanceof Utf8 ? (Utf8)this.cover : null);
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.isbn = null;
          } else {
            this.isbn = in.readString(this.isbn instanceof Utf8 ? (Utf8)this.isbn : null);
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.longDescription = null;
          } else {
            this.longDescription = in.readString(this.longDescription instanceof Utf8 ? (Utf8)this.longDescription : null);
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.pageCount = null;
          } else {
            this.pageCount = in.readInt();
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.publishedDate = null;
          } else {
            this.publishedDate = in.readString(this.publishedDate instanceof Utf8 ? (Utf8)this.publishedDate : null);
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.shortDescription = null;
          } else {
            this.shortDescription = in.readString(this.shortDescription instanceof Utf8 ? (Utf8)this.shortDescription : null);
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.status = null;
          } else {
            this.status = in.readString(this.status instanceof Utf8 ? (Utf8)this.status : null);
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.title = null;
          } else {
            this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










